Problem description
Сегодня большинство финансовых организаций предоставляют своим клиентам услуги онлайн-банкинга.
Эти приложения часто имеют встроенные инструменты для управления личными расходами через веб-интерфейс или мобильное приложение.
Однако интересной задачей является интеграция таких сервисов разных банков, чтобы у вас было единственное место (приложение)
для отслеживания движения ваших средств. Интеграция информационных систем, связанных с несколькими банками, может быть очень сложной задачей,
однако существует упрощенный способ решения той же проблемы. Большинство служб онлайн-банкинга отправляют текстовые сообщения (SMS)
в качестве подтверждения, чтобы информировать клиентов обо всех операциях, связанных с их банковскими счетами (кредитными картами).
В этом задании вы внедрите систему, которая использует эти сообщения для создания простого приложения для управления личными расходами.

Description of tasks
В качестве исходного набора данных вам предоставляется список SMS-сообщений, полученных на ваш смартфон.
Каждое SMS имеет исходный номер телефона, с которого оно было получено, и текст сообщения.
Ваша заявка должна обрабатывать SMS с 2 телефонных номеров:
1. 480 (SuperBank). Онлайн-сервис этого банка отправляет SMS-сообщения двух типов:
    Withdrawal: card *6678: 10 EUR, balance: 578 EUR
    Transfer: card *6623: 100 EUR, balance: 870 EUR
Текстовые сообщения, отправляемые Супербанком, начинаются с «Снятие» или «Перевод» в зависимости от типа операции,
затем следуют последние 4 цифры кредитной карты, затем дельта операции (всегда положительная, в зависимости от типа операции,
в которой находятся деньги. либо добавляется на карту (перевод), либо снимается с карты (вывод) и, наконец, текущий баланс.
2. 720 (GorgeousBank). Онлайн-сервис этого банка отправляет SMS-сообщения двух типов:
    *1238: -10 EUR, left: 450 EUR
    *1253: +500 EUR, left: 700 EUR
SMS-сообщения GorgeousBank начинаются с *, за которым следуют 4 последние цифры кредитной карты клиента,
затем дельта операции (может быть как положительной, так и отрицательной в зависимости от типа операции), а затем текущий баланс.

Basic part (6 points)
1. Начните новый проект ++++
2. Создайте текстовый файл, который будет содержать исходный набор данных SMS-сообщений. Каждое сообщение
должно иметь следующие три атрибута: номер телефона, дату и время получения сообщения, текст. Файл может содержать сообщения
не только с двух целевых телефонных номеров, но и с других.
3. Прочитайте и обработайте набор данных, чтобы извлечь список операций по переводу денег. Вы можете жестко закодировать
только два телефонных номера, которые соответствуют двум банкам, однако оставшиеся данные (номера карт, суммы и т. Д.)
Должны быть извлечены из содержимого файла.
4. Внедрите интерфейс взаимодействия с пользователем, который будет отображать текущие средства клиента и рассчитывать
расходы за определенный месяц и год (введенные пользователем) - проверьте поток программы ниже

Extra part No. 1 (2 points)
Проверьте библиотеку openpyxl для чтения и записи файлов XLSX из программ Python. Используйте openpyxl для экспорта
полного ежемесячного отчета. В отличие от интерфейса вашей программной консоли, отчет Excel должен содержать все транзакции,
отсортированные по возрастанию даты. Внизу списка транзакций добавьте итоговую строку (которая должна совпадать в числах с тем,
что ваша программа выводит на консоль в виде краткого резюме ежемесячного отчета). Убедитесь, что отчет Excel удобен
для чтения, все столбцы имеют соответствующую ширину, итоговая строка выделена, заголовок отображается вверху.

Extra part No. 2 (2 points)
Настройте свою программу таким образом, чтобы можно было легко добавлять новые алгоритмы обработки SMS-сообщений
(т. Е. Из нового банковского онлайн-сервиса).
Иногда трудно сказать, что именно легко, а что нет, но чтобы получить максимальные 2 балла, вы должны найти решение,
которое потребует добавления / изменения не более 5 строк кода в основной программе, чтобы сделать новый логический функционал.
Подсказка: вам нужно извлечь конкретную логику обработки SMS каждого банка в отдельный модуль, а затем динамически
загрузить необходимые модули. Основная программа должна быть оставлена только с общей логикой.
Некоторые из принципов функционального программирования могут помочь вам решить эту задачу.

Hints
Даты могут быть представлены в виде строк, для удобства сравнения многих дат хранения приложений в формате
ГГГГ-ММ-дд ЧЧ: мм: сс вы можете затем извлечь месяц и год, используя срезы на строках. Вы также можете проверить тип даты
и времени Python (необходимо импортировать)

General requirements
Используйте функции и дополнительные модули для улучшения структуры программы.
Защита от неправильного ввода данных пользователем и ошибок, связанных с файлами.
Применять правильный стиль кодирования, использовать значимые имена переменных и функций
