Обязательно:
1. переписать файле inserting_banknotes. При Входе не корректной купюры выдавалась ошибка +++Done+++
2. inserting нужно вывести принимаемые купюры ++++Done+++
3. в файле iteam_prints выписывать только существующие продукты ++++DONE++++
4. при некорректном вводе банкнот выходила прога не падала +++DONE+++
5. при некорректном вводе продуктов выходила прога не падала +++DONE+++
6. не давать ввод при нехватки сдачи
7. при отрицательных значениях в вводе пробуктов прога падает. Исправить!
8. при вводе номера продукта больше чем имеется - ошибка. Исправить!
9. не может быть отрицательного количества сдачи


Дополнительно:
1. добавить дату в отсылке F
2. подписать основные функции и переменные
3. навести порядок
4. проработать запись забрать монеты при сдаче +++DONE+++
5. убрать два сепоратора в листе продуктов +++DONE+++
6. дописать show info



            Задание
Вступление
В первом домашнем задании вы будете реализовывать упрощенную логику торгового автомата. Сегодня торговые автоматы (VМ)
используются для предоставления широкого спектра услуг без оператора, от продажи
закуски, напитки или транспортные билеты для печати фотографий Instagram.
Написание полного приложения для реального торгового автомата требует физического оборудования (двигатели, монеты
акцепторы, валидаторы и т. д.). В вашем решении многие функции реального торгового терминала будут эмулироваться консольным вводом и выводом.
Например, принятие платежа будет выполнено пользователем, вводящим номинал банкноты, в то время как выдача продукта или изменения будет
осуществляться с помощью вывода на консоль.

Общие требования
• Используйте правильный стиль кодирования, следуйте рекомендациям PEP-8. Строгая проверка PEP-8, такая как в PyJudge,
 выполняться не будет, однако, если код становится трудным для чтения из-за многочисленных нарушений PEP-8, ваша оценка может быть снижена
• Используйте константы вместо «магических чисел»
• Используйте функции (и, возможно, модули) для модульной вашей программы, не помещайте всю логику в основную
программа
• Защита от возможных сбоев программы, возникающих в результате неправильных действий пользователя, например, ввод недействительного номера и др.
• Убедитесь, что вы представили свою собственную работу. Все решения будут проверены на плагиат автоматической службой
Возможности торговых автоматов
• VМ принимает следующие банкноты: 50 руб., 100 руб., 200 руб. И 500 руб.
 Однако вы должны разработать программный код таким образом, чтобы список можно было легко распространить на другие типы счетов.
• Изменение дается только в монетах 10RUB, 5RUB, 2RUB и 1RUB в порядке убывания приоритета.
• Терминал способен физически хранить до 15 предметов каждого продукта.
• Модуль выдачи сдачи способен физически удерживать до 400 монет каждого номинала.

Основная задача (максимум 6 баллов)
Начните с создания ассортимента товаров для вашего торгового автомата.
Закрепите его в структуре данных в вашей программе (пользователю не нужно вводить эту информацию!).
В частности, необходимо хранить следующую информацию:
• Продукты: название, цена (целое число) и оставшееся количество каждого продукта
• Принятые деньги: количество принятых банкнот каждого достоинства с начала операции
(или для расширенной задачи - с момента последней операции обслуживания)
• Количество оставшихся монет каждого достоинства, использованных для внесения изменений.
Ваше приложение VM должно работать в цикле, предоставляя пользователю выбор следующих опций на каждом
итерация:
1. Вставьте банкноту
2. Показать доступные продукты
3. Выберите продукт
4. Получить сдачу
Когда пользователь вводит значение банкноты, проверьте, поддерживается ли оно, и увеличьте соответствующий счетчик,
в противном случае выдайте сообщение об ошибке. +++
Во втором варианте (показать доступные продукты) распечатать информацию обо всех продуктах,
которые в настоящее время присутствуют (количество> 0). +++
В третьем меню опции предоставляют на выбор только те товары, которые присутствуют и могут быть куплены с текущим кредитом.
Если пользователь делает выбор, распечатайте информацию о товаре и уменьшите его количество. +++
Когда выбрана опция «Получить сдачу», выдайте сдачу монетами 10, 5, 2 и 1 руб. (Распечатайте распределение монет на экране).
Монеты достоинством 10 рублей имеют наивысший приоритет, затем 5 рублей, затем 2 рубля и, наконец, 1 рубль. Для выполнения основной задачи
вам не нужно учитывать количество оставшихся монет (предполагается, что оно бесконечно). +++

1. + 2 балла. Напишите усовершенствованный алгоритм расчета изменений, который учитывает оставшееся количество каждого номинала монет,
то есть, если в терминале не осталось монет 10RUB, выдайте изменение, используя другие типы монет.
Дополнительно сделайте несколько проверок, которые гарантируют, что пользователь может получить полное изменение в любое время.
Это около двух сценариев:
(а) Когда пользователь вставляет банкноту, убедитесь, что есть хотя бы один товар, который можно купить с полной заменой.
Если таких продуктов нет, не принимайте банкноту.
(b) Когда пользователь выбирает продукт, убедитесь, что изменение можно обойтись без доступных монет, в противном случае не продавайте продукт. +++

2. + 2 балла. Реализуйте логику обслуживания VМ. Если в главном меню вместо выбора какого-либо параметра введен секретный пароль «srvop17»,
выполняется операция службы. Сервисная операция состоит из следующих шагов:
• Установите оставшееся количество всех продуктов на максимум (см. Выше) +++
• Установите максимальное количество оставшихся монет каждой номинальной стоимости (см. Выше). +++
• Распечатайте количество банкнот в модуле приема наличных и сбросьте их счетчики (сделайте их 0), +++
• Запросить нажатие клавиши, затем вернуться в главное меню +++
После завершения каждой торговой операции (когда кредит достигает 0), проверьте, требуется ли услуга. это
может произойти в следующих двух случаях:
• В торговом автомате не осталось товаров +++
• В терминале не осталось изменений +++
В любом из двух указанных выше случаев отключите продажу продуктов - можно ввести только пароль службы (см. Предыдущий шаг).